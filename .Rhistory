) %>%
arrange(predicted_standard) %>%
rename(
Sample = sample,
Avg.RFU = mean_rfu,
Predicted_Target = classification,
Predicted_Standard = predicted_standard
)
colnames(key) <- tolower(colnames(key))
colnames(predictions_data) <- tolower(colnames(predictions_data))
key_table <- left_join(predictions_data, key, by = "sample") %>%
select(sample, predicted_target, key) %>%
rename(
Sample = sample,
Predicted_Target = predicted_target,
Key = key)
plot_ly(pcr, x = ~cycle, y = ~rfu, color = ~sample,
text = ~paste("Sample: ", sample, "<br>",
"Group: ", group, "<br>",
"RFU: ", rfu, "<br>",
"Cycle: ", cycle, "<br>",
"Target: ", target),
type = 'scatter', mode = 'lines', opacity = 0.1,
hoverinfo = 'text') %>%
layout(
xaxis = list(title = "Cycle"),
yaxis = list(title = "RFU"),
showlegend = TRUE
)
plot_ly(real, x = ~cycle, y = ~rfu, color = ~sample,
text = ~paste("Sample: ", sample, "<br>",
"Group: ", group, "<br>",
"RFU: ", rfu, "<br>",
"Cycle: ", cycle, "<br>",
"Target: ", target),
type = 'scatter', mode = 'lines', opacity = 0.1,
hoverinfo = 'text') %>%
layout(
xaxis = list(title = "Cycle"),
yaxis = list(title = "RFU"),
showlegend = TRUE
)
predictions_data <- unknown %>%
mutate(
predicted_standard = new_targets$standard[match(classification, new_targets$target)]
) %>%
arrange(predicted_standard) %>%
rename(
Sample = sample,
Avg.RFU = mean_rfu,
Predicted_Target = classification,
Predicted_Standard = predicted_standard
)
predictions_data
View(predictions_data)
View(unknown)
predictions_data <- unknown %>%
mutate(
predicted_standard = new_targets$standard[match(classification, new_targets$target)]
) %>%
arrange(predicted_standard) %>%
rename(
Sample = sample,
Avg.RFU = mean_rfu,
Predicted_Target = classification,
Predicted_Standard = predicted_standard
)
View(predictions_data)
predictions_data
View(real_rfu)
View(unknown)
View(predictions_raw)
View(prediction_raw)
library(dplyr)
library(tidyr)
# Filter out Unknown samples and select the last 20 cycles
real <- pcr %>%
filter(!grepl("Unknown_Sample_", target))
confidence_targets <- real %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle))
# Function to calculate the 95% Confidence Interval
calc_ci <- function(rfu_values) {
n <- length(rfu_values)
mean_rfu <- mean(rfu_values)
sd_rfu <- sd(rfu_values)
se_rfu <- sd_rfu / sqrt(n)
# 95% Confidence Interval (Z-value for 95% CI)
z <- 1.96
lower_ci <- mean_rfu - z * se_rfu
upper_ci <- mean_rfu + z * se_rfu
# Return as a named list
return(list(lower_ci = lower_ci, upper_ci = upper_ci))
}
# Use dplyr to group by target and calculate confidence intervals
target_cis <- confidence_targets %>%
group_by(target) %>%
summarise(
ci = list(calc_ci(rfu)) # Return a named list
) %>%
unnest_wider(ci) # Unnest the list into separate columns
# View the calculated confidence intervals for each target
target_cis
# Step 1: Filter out the real dataset
real <- pcr %>%
filter(!grepl("Unknown_Sample_", target))
real_rfu <- real %>%
group_by(target) %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
mutate(Q1 = quantile(rfu, 0.25),
Q3 = quantile(rfu, 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR) %>%
distinct(target, lower_bound, upper_bound)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(target == "UnknownSample",
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
unknown
runApp()
unknown_outliers <- unknown %>%
sum_all_pairs <- function(df) {
new_rows <- list()
for (i in 1:(nrow(df) - 1)) {
for (j in (i + 1):nrow(df)) {
lower_value <- df$lower_bound[i] + df$lower_bound[j]
upper_value <- df$upper_bound[i] + df$upper_bound[j]
new_row <- data.frame(
target = paste(df$target[i], df$target[j], sep = "/"),
lower_bound = lower_value,
upper_bound = upper_value
)
new_rows[[length(new_rows) + 1]] <- new_row
}
}
new_rows_df <- do.call(rbind, new_rows)
df <- rbind(df, new_rows_df)
return(df)
}
# Step 1: Filter out the real dataset
real <- pcr %>%
filter(!grepl("Unknown_Sample_", target))
real_rfu <- real %>%
group_by(target) %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
mutate(Q1 = quantile(rfu, 0.25),
Q3 = quantile(rfu, 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR) %>%
distinct(target, lower_bound, upper_bound)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
# Detect outliers within the unknown targets
unknown_outliers <- unknown %>%
group_by(target, sample) %>%
summarise(
mean_value = mean(mean_rfu),
sd_value = sd(mean_rfu),
iqr_value = IQR(mean_rfu),
q1 = quantile(mean_rfu, 0.25),
q3 = quantile(mean_rfu, 0.75)
)
View(unknown)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
View(unknown)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("Unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
# Step 1: Filter out the real dataset
real <- pcr %>%
filter(!grepl("Unknown", target))
real_rfu <- real %>%
group_by(target) %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
mutate(Q1 = quantile(rfu, 0.25),
Q3 = quantile(rfu, 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR) %>%
distinct(target, lower_bound, upper_bound)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("Unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
# Detect outliers within the unknown targets
unknown_outliers <- unknown %>%
group_by(target, sample) %>%
summarise(
mean_value = mean(mean_rfu),
sd_value = sd(mean_rfu),
iqr_value = IQR(mean_rfu),
q1 = quantile(mean_rfu, 0.25),
q3 = quantile(mean_rfu, 0.75)
)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("Unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample, target) %>%
summarise(mean_rfu = mean(rfu))
# Detect outliers within the unknown targets
unknown_outliers <- unknown %>%
group_by(target, sample) %>%
summarise(
mean_value = mean(mean_rfu),
sd_value = sd(mean_rfu),
iqr_value = IQR(mean_rfu),
q1 = quantile(mean_rfu, 0.25),
q3 = quantile(mean_rfu, 0.75)
)
View(unknown_outliers)
# Detect outliers within the unknown targets
unknown_outliers <- unknown %>%
group_by(target) %>%
summarise(
mean_value = mean(mean_rfu),
sd_value = sd(mean_rfu),
iqr_value = IQR(mean_rfu),
q1 = quantile(mean_rfu, 0.25),
q3 = quantile(mean_rfu, 0.75)
)
unknown_outliers_determined <- left_join(unknown_outliers, by="target") %>%
mutate(
lower_bound = q1 - 1.5 * iqr_value,
upper_bound = q3 + 1.5 * iqr_value,
is_outlier = (Avg_RFU < lower_bound) | (Avg_RFU > upper_bound)
)
unknown_outliers_determined <- left_join(unknown_outliers, by="target") %>%
mutate(
lower_bound = q1 - 1.5 * iqr_value,
upper_bound = q3 + 1.5 * iqr_value,
is_outlier = (mean_rfu < lower_bound) | (mean_rfu > upper_bound)
)
unknown_outliers_determined <- unknown %>%
left_join(unknown_outliers, by="target") %>%
mutate(
lower_bound = q1 - 1.5 * iqr_value,
upper_bound = q3 + 1.5 * iqr_value,
is_outlier = (mean_rfu < lower_bound) | (mean_rfu > upper_bound)
)
View(unknown_outliers_determined)
# Display only outliers
outliers <- df %>% filter(is_outlier)
# Display only outliers
outliers <- df %>% dplyr::filter(is_outlier)
# Display only outliers
outliers <- df %>% dplyr::filter(is_outlier)
# Display only outliers
outliers <- df %>% dplyr::filter(is_outlier == TRUE)
# Display only outliers
outliers <- unknown_outliers_determined %>% dplyr::filter(is_outlier == TRUE)
outliers
View(outliers)
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_Sample = mean_rfu,
Avg_RFU_Target = mean_Value)
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_Sample = mean_rfu,
Avg_RFU_Target = mean_value)
outliers
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_Sample = mean_rfu,
Avg_RFU_Target = mean_value,
Lower_Bound_Target = lower_bound,
Upper_Bound_target = upper_bound) %>%
select(sample, target, Avg_RFU_Sample, Avg_RFU_Target, Lower_Bound_Target, Upper_Bound_target)
outliers
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_Sample = mean_rfu,
Avg_RFU_Target = mean_value,
Lower_Bound_Target = lower_bound,
Upper_Bound_target = upper_bound) %>%
select(sample, target, Avg_RFU_sample, Avg_RFU_target, Lower_Bound_target, Upper_Bound_target)
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_sample = mean_rfu,
Avg_RFU_target = mean_value,
Lower_Bound_target = lower_bound,
Upper_Bound_target = upper_bound) %>%
select(sample, target, Avg_RFU_sample, Avg_RFU_target, Lower_Bound_target, Upper_Bound_target)
outliers
unknown_without_outliers <- unknown %>%
filter(!(sample %in% outliers$sample))
View(unknown_without_outliers)
runApp()
print(names(unknown_without_outliers))
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(rsconnect)
library(rsconnect)
rsconnect::addConnectServer("https://shiny.byui.edu")
rsconnect::connectUser(account = "doe20001@byui.edu")
deployAPP()
deployApp()
rsconnect::deployApp(app.R,
contentCategory = "app",
appName = "Multiplex Analysis App",
appTitle = "Multiplex Analysis App")
install.packages("MASS")
shiny::runApp()
options(repos = c(CRAN = "https://cran.rstudio.com/"))
install.packages("MASS")
install.packages("MASS")
sudo /opt/rstudio-connect/bin/license-manager activate
rsconnect::terminateApp(appName = "multiplex_analysis")
rsconnect::terminateApp(appName = "multiplex_analysis")
rsconnect::terminateApp(appName = "multiplex_analysis")
rsconnect::forgetApp(appName = "multiplex_analysis", account = "drock")
rm -rf .rsconnect
packrat::clean()
packrat::restore()
packrat::snapshot()
packrat::clean()
packrat::restore()
packrat::snapshot()
rsconnect::deployApp(appDir = "C:\Users\derek\OneDrive - BYU-Idaho\Documents\Data Science Society\multiplex_analysis"multiplex_analysis", account = "drock", forceUpdate = TRUE)
rsconnect::deployApp(appDir = "C:\\Users\\derek\\OneDrive - BYU-Idaho\\Documents\\Data Science Society\\multiplex_analysis"multiplex_analysis", account = "drock", forceUpdate = TRUE)
rsconnect::deployApp(appDir = "C:\Users\derek\OneDrive - BYU-Idaho\Documents\Data Science Society\\multiplex_analysis", account = "drock", forceUpdate = TRUE)
rsconnect::deployApp(appDir = "C:\\Users\\derek\\OneDrive - BYU-Idaho\\Documents\\Data Science Society\\multiplex_analysis", account = "drock", forceUpdate = TRUE)
library(shiny)
library(shinythemes)
library(readxl)
library(tidyverse)
library(plotly)
library(shinyjs)
library(shinyWidgets)
library(DT)
library(pander)
library(shinyjs)
library(readr)
library(MASS)
ui <- fluidPage(
tags$head(
tags$style(HTML("
body {
font-family: 'Arial', sans-serif;
font-size: 16px;"))),
theme = shinytheme("paper"),
navbarPage(
# Title tab
"Multiplex Analysis",
# Home tab
tabPanel(
"Home",
HTML("Welcome to the Multiplex PCR Analysis App! The app's goal is to automate the process of graphing and analyzing data from a PCR and to predict targets for unknown smaples."),
HTML("To begin, make sure your data looks similar as the following:"),
tags$h4("The fluorescence data file should be structured as follows:"),
img(src = "flu_image.png", width = "900px", height = "300px"),
tags$br(),
tags$br(),
HTML("The \"Cycle\" column should list all cycle numbers, while each sample (e.g., A1) should have its own column populated with the corresponding RFU value for each cycle. Currently, the app only supports samples labeled A-Z, not extended labels like AB1. Ensure that the sample letters are capitalized, but the \"Cycle\" column is case-insensitive and can be labeled as \"cycle\"."),
tags$br(),
tags$br(),
tags$h4("The plate layout data file should be structured as follows:"),
img(src = "plate_image.png", width = "500px", height = "500px"),
tags$br(),
tags$br(),
HTML("Column names do not need to be capitalized. Each row should represent the data for a single sample. If the target is unknown, label it as 'Unknown_Sample_X', where X is a number corresponding to the identity of the unknown sample. For example, if you have 3 unknown targets, and each target has 6 samples, label the samples as 'Unknown_Sample_1' for the first set of 6 samples, 'Unknown_Sample_2' for the second set of 6 samples, and 'Unknown_Sample_3' for the third set of 6 samples."),
tags$br(),
tags$br(),
),
# Import Data tab
tabPanel(
"Import Data",
tags$h2("Upload your data files to begin", style = "text-align: center;"),
tags$hr(style = "border-top: 3px solid lightblue; margin: 20px 0;"),
fileInput("fluorescence_file", "Import Fluorescence File (.csv/.xlsx)", accept = c(".csv", ".xlsx", ".xls")),
uiOutput("fluorescence_status"),
tableOutput("fluorescence_table"),
fileInput("plate_file", "Import Plate File (.csv/.xlsx)", accept = c("csv", ".xlsx", ".xls")),
uiOutput("plate_status"),
tableOutput("plate_table"),
tags$br()
),
# Graphing tab
tabPanel(
"Graphing",
useShinyjs(),
actionButton("toggle_sidebar", "Toggle Filter Options", icon = icon("bars")),  # Add a toggle button
sidebarLayout(
div(id = "sidebar",
sidebarPanel(
tags$h4("Filter Options", style = "text-align: center;"),
pickerInput("filter_targets", "Filter Targets",
choices = NULL, multiple = TRUE,
options = list(`actions-box` = TRUE,
`selected-text-format` = "count > 1",
`live-search` = TRUE)),
pickerInput("filter_samples", "Filter Samples",
choices = NULL, multiple = TRUE,
options = list(`actions-box` = TRUE,
`selected-text-format` = "count > 1",
`live-search` = TRUE)),
pickerInput("filter_groups", "Filter Groups",
choices = NULL, multiple = TRUE,
options = list(`actions-box` = TRUE,
`selected-text-format` = "count > 1",
`live-search` = TRUE)),
pickerInput("filter_target_concentration", "Filter Target Concentration",
choices = NULL, multiple = TRUE,
options = list(`actions-box` = TRUE,
`selected-text-format` = "count > 1",
`live-search` = TRUE)),
pickerInput("filter_probe_concentration", "Filter Probe Concentration",
choices = NULL, multiple = TRUE,
options = list(`actions-box` = TRUE,
`selected-text-format` = "count > 1",
`live-search` = TRUE)),
sliderInput("filter_cycles", "Filter Cycles",
min = 1, max = 100,  # Default values; will be updated
value = c(1, 100)),
actionButton("reset_filters", "Reset Filters", icon = icon("refresh")),
width = 3
)
),
mainPanel(
tags$h3("Generate Graphs"),
tags$hr(style = "border-top: 3px solid lightblue; margin: 20px 0;"),
actionButton("showbase_graph", "Show Base Graph"),
actionButton("showtarget_graph", "Show Target Graph"),
actionButton("showdistribution_graph", "Show Distribution Graph"),
plotlyOutput("chosen_graph", width="110%", height="110%"),
tags$br(),
tags$br(),
textOutput("plot_text"),
#tags$br(),
#downloadButton("download_filtered_plot", "Download Selected Plot"),
tags$br()
)
)
),
# Summary Table tab
tabPanel(
"Summary Table",
tags$h2("Difference Summaries", style = "text-align: center;"),
tags$hr(style = "border-top: 3px solid lightblue; margin: 20px 0;"),
tags$br(),
tags$h3("Base Level is cycles 5-10, End Level is cycles 50-end", style = "text-align: center;"),
tags$br(),
tags$br(),
DT::dataTableOutput("summary_table"),
tags$br(),
downloadButton("download_summary_table", "Download Summary Table"),
tags$br(),
tags$br()
),
# Prediction tab
tabPanel(
"Predictions",
tags$h3("Pattern of the original targets without the unknown samples", style = "text-align: center;"),
tags$hr(style = "border-top: 3px solid lightblue; margin: 20px 0;"),
plotlyOutput("real_target_graph"),
tags$h3("The true bounds of all possible targets", style = "text-align: center;"),
tags$hr(style = "border-top: 3px solid lightblue; margin: 20px 0;"),
DT::dataTableOutput("real_target_table"),
HTML("The true bounds were found by taking the last 20 cycles and finding the corresponding range of the RFU."),
tags$h3("The predicted targets for each unknown sample", style = "text-align: center;"),
tags$hr(style = "border-top: 3px solid lightblue; margin: 20px 0;"),
DT::dataTableOutput("predictions_data_table"),
HTML("The average RFU for each sample was found by taking the last 20 cycles and averaging the RFU."),
tags$h3("Outliers present within the bounds of the assigned target", style = "text-align: center;"),
tags$hr(style = "border-top: 3px solid lightblue; margin: 20px 0;"),
DT::dataTableOutput("outliers_data_table"),
HTML("The following samples were ignored during the prediction process."),
HTML("If the table is empty, then there are no outliers found."),
tags$br(),
tags$br()
),
)
)
library(MASS)
library(shinyjs)
library(DT)
library(pander)
runApp()
shiny::runApp()
runApp()
