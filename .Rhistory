filter(sample == "E1" | sample == "H7"| sample == "E9" | sample == "G6" | sample == "E11" | sample == "E12")
ggplot(all_three, aes(x=cycle, y=rfu, color=sample)) +
geom_line()
ggplot(pcr, aes(x=cycle, y=rfu, color=sample)) +
geom_line()
ggplot(pcr, aes(x=cycle, y=rfu, color=target)) +
geom_point()
dist <- pcr %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle))
ggplot(dist, aes(x = target, y = rfu)) +
geom_boxplot() +
labs(x="Target", y="RFU")
summary_base <- pcr %>%
filter(cycle >= 5 & cycle <= 10) %>%
group_by(sample) %>%
mutate(
base_level_rfu = mean(rfu, na.rm = TRUE))
summary_end <- pcr %>%
filter(cycle >= max(pcr$cycle) - 10 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
mutate(
end_level_rfu = mean(rfu, na.rm=TRUE))
summary_data <- summary_base %>%
inner_join(summary_end, by = "sample") %>%
rename(target = target.x) %>%
mutate(
difference = round(end_level_rfu - base_level_rfu, 3),
base_level_rfu = round(base_level_rfu, 3),
end_level_rfu = round(end_level_rfu, 3)) %>%
select(sample, target, base_level_rfu, end_level_rfu, difference) %>%
rename(Sample = sample,
Target = target,
Base_Level_RFU = base_level_rfu,
End_Level_RFU = end_level_rfu,
Difference = difference) %>%
distinct() %>%
arrange(Sample)
outliers <- pcr %>%
filter(target!= "UnknownSample",
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(target) %>%
mutate(Q1 = quantile(rfu, 0.25),
Q3 = quantile(rfu, 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR) %>%
distinct(target, lower_bound, upper_bound)
library(dplyr)
library(tidyr)
# Filter out Unknown samples and select the last 20 cycles
real <- pcr %>%
filter(target != "UnknownSample")
confidence_targets <- real %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle))
# Function to calculate the 95% Confidence Interval
calc_ci <- function(rfu_values) {
n <- length(rfu_values)
mean_rfu <- mean(rfu_values)
sd_rfu <- sd(rfu_values)
se_rfu <- sd_rfu / sqrt(n)
# 95% Confidence Interval (Z-value for 95% CI)
z <- 1.96
lower_ci <- mean_rfu - z * se_rfu
upper_ci <- mean_rfu + z * se_rfu
# Return as a named list
return(list(lower_ci = lower_ci, upper_ci = upper_ci))
}
# Use dplyr to group by target and calculate confidence intervals
target_cis <- confidence_targets %>%
group_by(target) %>%
summarise(
ci = list(calc_ci(rfu)) # Return a named list
) %>%
unnest_wider(ci) # Unnest the list into separate columns
# View the calculated confidence intervals for each target
target_cis
# Step 1: Filter out the real dataset
real <- pcr %>%
filter(target != "UnknownSample")
real_rfu <- real %>%
group_by(target) %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
mutate(Q1 = quantile(rfu, 0.25),
Q3 = quantile(rfu, 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR) %>%
distinct(target, lower_bound, upper_bound)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(target == "UnknownSample",
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
sum_all_pairs <- function(df) {
# Initialize an empty list to store new rows
new_rows <- list()
# Loop through all unique pairs of indices
for (i in 1:(nrow(df) - 1)) {
for (j in (i + 1):nrow(df)) {
# Sum the lower_bound values from the two rows
lower_value <- df$lower_bound[i] + df$lower_bound[j]
upper_value <- df$upper_bound[i] + df$upper_bound[j]
# Create a new row with the summed lower bound
new_row <- data.frame(
target = paste(df$target[i], df$target[j], sep = "_"),  # Concatenate targets
lower_bound = lower_value,
upper_bound = upper_value  # Or provide a value if needed
)
# Append the new row to the list
new_rows[[length(new_rows) + 1]] <- new_row
}
}
# Convert the list of new rows into a data frame
new_rows_df <- do.call(rbind, new_rows)
# Add the new rows to the original dataframe
df <- rbind(df, new_rows_df)
return(df)
}
new_targets_pairs <- sum_all_pairs(real_rfu)
# Function to sum by triples
sum_all_triples <- function(df) {
# Initialize an empty list to store new rows
new_rows <- list()
# Loop through all unique combinations of three indices
for (i in 1:(nrow(df) - 2)) {
for (j in (i + 1):(nrow(df) - 1)) {
for (k in (j + 1):nrow(df)) {
# Sum the lower_bound values from the three rows
lower_value <- df$lower_bound[i] + df$lower_bound[j] + df$lower_bound[k]
upper_value <- df$upper_bound[i] + df$upper_bound[j] + df$upper_bound[k]
# Create a new row with the summed lower bound
new_row <- data.frame(
target = paste(df$target[i], df$target[j], df$target[k], sep = "/"),  # Concatenate targets
lower_bound = lower_value,
upper_bound = upper_value  # Or provide a value if needed
)
# Append the new row to the list
new_rows[[length(new_rows) + 1]] <- new_row
}
}
}
# Convert the list of new rows into a data frame
new_rows_df <- do.call(rbind, new_rows)
# Add the new rows to the original dataframe
df <- rbind(df, new_rows_df)
return(df)
}
new_targets_triples <- sum_all_triples(real_rfu)
prediction_raw <- rbind(new_targets_pairs, new_targets_triples)
new_targets <- unique(prediction_raw)
new_targets <- new_targets%>%
filter(!grepl("Blank_", target))
new_targets$rank <- rank(new_targets$lower_bound)
new_targets$standard <- new_targets$rank - 1
new_targets <- subset(new_targets, select = -rank)
# Define the classify_sample function
classify_sample <- function(rfu_value, new_targets) {
# Loop through each target's bounds and check if RFU falls within the bounds
for (i in 1:nrow(new_targets)) {
if (rfu_value >= new_targets$lower_bound[i] && rfu_value <= new_targets$upper_bound[i]) {
return(new_targets$target[i])  # If RFU is within bounds, classify as this target
}
}
# If no bounds match, flag as uncertain
return("Uncertain")
}
# Step 3: Apply classification to each mean_rfu value in the unknown dataset
unknown$classification <- sapply(unknown$mean_rfu, classify_sample, new_targets = new_targets)
# View the classification results
unknown
predictions_data <- unknown %>%
mutate(
predicted_standard = new_targets$standard[match(classification, new_targets$target)]
) %>%
arrange(predicted_standard) %>%
rename(
Sample = sample,
Avg.RFU = mean_rfu,
Predicted_Target = classification,
Predicted_Standard = predicted_standard
)
colnames(key) <- tolower(colnames(key))
colnames(predictions_data) <- tolower(colnames(predictions_data))
key_table <- left_join(predictions_data, key, by = "sample") %>%
select(sample, predicted_target, key) %>%
rename(
Sample = sample,
Predicted_Target = predicted_target,
Key = key)
plot_ly(pcr, x = ~cycle, y = ~rfu, color = ~sample,
text = ~paste("Sample: ", sample, "<br>",
"Group: ", group, "<br>",
"RFU: ", rfu, "<br>",
"Cycle: ", cycle, "<br>",
"Target: ", target),
type = 'scatter', mode = 'lines', opacity = 0.1,
hoverinfo = 'text') %>%
layout(
xaxis = list(title = "Cycle"),
yaxis = list(title = "RFU"),
showlegend = TRUE
)
plot_ly(real, x = ~cycle, y = ~rfu, color = ~sample,
text = ~paste("Sample: ", sample, "<br>",
"Group: ", group, "<br>",
"RFU: ", rfu, "<br>",
"Cycle: ", cycle, "<br>",
"Target: ", target),
type = 'scatter', mode = 'lines', opacity = 0.1,
hoverinfo = 'text') %>%
layout(
xaxis = list(title = "Cycle"),
yaxis = list(title = "RFU"),
showlegend = TRUE
)
predictions_data <- unknown %>%
mutate(
predicted_standard = new_targets$standard[match(classification, new_targets$target)]
) %>%
arrange(predicted_standard) %>%
rename(
Sample = sample,
Avg.RFU = mean_rfu,
Predicted_Target = classification,
Predicted_Standard = predicted_standard
)
predictions_data
View(predictions_data)
View(unknown)
predictions_data <- unknown %>%
mutate(
predicted_standard = new_targets$standard[match(classification, new_targets$target)]
) %>%
arrange(predicted_standard) %>%
rename(
Sample = sample,
Avg.RFU = mean_rfu,
Predicted_Target = classification,
Predicted_Standard = predicted_standard
)
View(predictions_data)
predictions_data
View(real_rfu)
View(unknown)
View(predictions_raw)
View(prediction_raw)
library(dplyr)
library(tidyr)
# Filter out Unknown samples and select the last 20 cycles
real <- pcr %>%
filter(!grepl("Unknown_Sample_", target))
confidence_targets <- real %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle))
# Function to calculate the 95% Confidence Interval
calc_ci <- function(rfu_values) {
n <- length(rfu_values)
mean_rfu <- mean(rfu_values)
sd_rfu <- sd(rfu_values)
se_rfu <- sd_rfu / sqrt(n)
# 95% Confidence Interval (Z-value for 95% CI)
z <- 1.96
lower_ci <- mean_rfu - z * se_rfu
upper_ci <- mean_rfu + z * se_rfu
# Return as a named list
return(list(lower_ci = lower_ci, upper_ci = upper_ci))
}
# Use dplyr to group by target and calculate confidence intervals
target_cis <- confidence_targets %>%
group_by(target) %>%
summarise(
ci = list(calc_ci(rfu)) # Return a named list
) %>%
unnest_wider(ci) # Unnest the list into separate columns
# View the calculated confidence intervals for each target
target_cis
# Step 1: Filter out the real dataset
real <- pcr %>%
filter(!grepl("Unknown_Sample_", target))
real_rfu <- real %>%
group_by(target) %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
mutate(Q1 = quantile(rfu, 0.25),
Q3 = quantile(rfu, 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR) %>%
distinct(target, lower_bound, upper_bound)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(target == "UnknownSample",
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
unknown
runApp()
unknown_outliers <- unknown %>%
sum_all_pairs <- function(df) {
new_rows <- list()
for (i in 1:(nrow(df) - 1)) {
for (j in (i + 1):nrow(df)) {
lower_value <- df$lower_bound[i] + df$lower_bound[j]
upper_value <- df$upper_bound[i] + df$upper_bound[j]
new_row <- data.frame(
target = paste(df$target[i], df$target[j], sep = "/"),
lower_bound = lower_value,
upper_bound = upper_value
)
new_rows[[length(new_rows) + 1]] <- new_row
}
}
new_rows_df <- do.call(rbind, new_rows)
df <- rbind(df, new_rows_df)
return(df)
}
# Step 1: Filter out the real dataset
real <- pcr %>%
filter(!grepl("Unknown_Sample_", target))
real_rfu <- real %>%
group_by(target) %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
mutate(Q1 = quantile(rfu, 0.25),
Q3 = quantile(rfu, 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR) %>%
distinct(target, lower_bound, upper_bound)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
# Detect outliers within the unknown targets
unknown_outliers <- unknown %>%
group_by(target, sample) %>%
summarise(
mean_value = mean(mean_rfu),
sd_value = sd(mean_rfu),
iqr_value = IQR(mean_rfu),
q1 = quantile(mean_rfu, 0.25),
q3 = quantile(mean_rfu, 0.75)
)
View(unknown)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
View(unknown)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("Unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
# Step 1: Filter out the real dataset
real <- pcr %>%
filter(!grepl("Unknown", target))
real_rfu <- real %>%
group_by(target) %>%
filter(cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
mutate(Q1 = quantile(rfu, 0.25),
Q3 = quantile(rfu, 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR) %>%
distinct(target, lower_bound, upper_bound)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("Unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample) %>%
summarise(mean_rfu = mean(rfu))
# Detect outliers within the unknown targets
unknown_outliers <- unknown %>%
group_by(target, sample) %>%
summarise(
mean_value = mean(mean_rfu),
sd_value = sd(mean_rfu),
iqr_value = IQR(mean_rfu),
q1 = quantile(mean_rfu, 0.25),
q3 = quantile(mean_rfu, 0.75)
)
# Step 2: Filter unknown samples and calculate mean RFU per sample
unknown <- pcr %>%
filter(grepl("Unknown", target),
cycle >= max(pcr$cycle) - 20 & cycle <= max(pcr$cycle)) %>%
group_by(sample, target) %>%
summarise(mean_rfu = mean(rfu))
# Detect outliers within the unknown targets
unknown_outliers <- unknown %>%
group_by(target, sample) %>%
summarise(
mean_value = mean(mean_rfu),
sd_value = sd(mean_rfu),
iqr_value = IQR(mean_rfu),
q1 = quantile(mean_rfu, 0.25),
q3 = quantile(mean_rfu, 0.75)
)
View(unknown_outliers)
# Detect outliers within the unknown targets
unknown_outliers <- unknown %>%
group_by(target) %>%
summarise(
mean_value = mean(mean_rfu),
sd_value = sd(mean_rfu),
iqr_value = IQR(mean_rfu),
q1 = quantile(mean_rfu, 0.25),
q3 = quantile(mean_rfu, 0.75)
)
unknown_outliers_determined <- left_join(unknown_outliers, by="target") %>%
mutate(
lower_bound = q1 - 1.5 * iqr_value,
upper_bound = q3 + 1.5 * iqr_value,
is_outlier = (Avg_RFU < lower_bound) | (Avg_RFU > upper_bound)
)
unknown_outliers_determined <- left_join(unknown_outliers, by="target") %>%
mutate(
lower_bound = q1 - 1.5 * iqr_value,
upper_bound = q3 + 1.5 * iqr_value,
is_outlier = (mean_rfu < lower_bound) | (mean_rfu > upper_bound)
)
unknown_outliers_determined <- unknown %>%
left_join(unknown_outliers, by="target") %>%
mutate(
lower_bound = q1 - 1.5 * iqr_value,
upper_bound = q3 + 1.5 * iqr_value,
is_outlier = (mean_rfu < lower_bound) | (mean_rfu > upper_bound)
)
View(unknown_outliers_determined)
# Display only outliers
outliers <- df %>% filter(is_outlier)
# Display only outliers
outliers <- df %>% dplyr::filter(is_outlier)
# Display only outliers
outliers <- df %>% dplyr::filter(is_outlier)
# Display only outliers
outliers <- df %>% dplyr::filter(is_outlier == TRUE)
# Display only outliers
outliers <- unknown_outliers_determined %>% dplyr::filter(is_outlier == TRUE)
outliers
View(outliers)
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_Sample = mean_rfu,
Avg_RFU_Target = mean_Value)
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_Sample = mean_rfu,
Avg_RFU_Target = mean_value)
outliers
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_Sample = mean_rfu,
Avg_RFU_Target = mean_value,
Lower_Bound_Target = lower_bound,
Upper_Bound_target = upper_bound) %>%
select(sample, target, Avg_RFU_Sample, Avg_RFU_Target, Lower_Bound_Target, Upper_Bound_target)
outliers
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_Sample = mean_rfu,
Avg_RFU_Target = mean_value,
Lower_Bound_Target = lower_bound,
Upper_Bound_target = upper_bound) %>%
select(sample, target, Avg_RFU_sample, Avg_RFU_target, Lower_Bound_target, Upper_Bound_target)
# Display only outliers
outliers <- unknown_outliers_determined %>%
dplyr::filter(is_outlier == TRUE) %>%
rename(
Avg_RFU_sample = mean_rfu,
Avg_RFU_target = mean_value,
Lower_Bound_target = lower_bound,
Upper_Bound_target = upper_bound) %>%
select(sample, target, Avg_RFU_sample, Avg_RFU_target, Lower_Bound_target, Upper_Bound_target)
outliers
unknown_without_outliers <- unknown %>%
filter(!(sample %in% outliers$sample))
View(unknown_without_outliers)
runApp()
print(names(unknown_without_outliers))
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(rsconnect)
library(rsconnect)
rsconnect::addConnectServer("https://shiny.byui.edu")
rsconnect::connectUser(account = "doe20001@byui.edu")
deployAPP()
deployApp()
rsconnect::deployApp(app.R,
contentCategory = "app",
appName = "Multiplex Analysis App",
appTitle = "Multiplex Analysis App")
install.packages("MASS")
shiny::runApp()
options(repos = c(CRAN = "https://cran.rstudio.com/"))
install.packages("MASS")
install.packages("MASS")
